/*
 * Copyright (c) 2014 T-Systems Multimedia Solutions GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * AppMon Server REST API
 * The AppMon Server exposes management and integration functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with the AppMon Server.  The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can typically occur in our REST interface:  * **400** - Bad Request: Some request parameters are not correct. * **401** - Unauthorized: A valid authorization header (Basic Authentication) is required but is not available. * **403** - Forbidden: Execution of request is not allowed, e.g. the user has no privileges. * **404** - Not Found: Endpoint does not exist or some entities could not be found, e.g. System Profile. * **500** - Internal Server Error: See response body for details.  Additional [usage examples](https://www.dynatrace.com/support/doc/appmon70/shortlink/id_server_rest_examples) can be found in the AppMon documentation. 
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package de.tsystems.mms.apm.performancesignature.dynatrace.rest.json.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import de.tsystems.mms.apm.performancesignature.util.PerfSigUIUtils;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * TestRunDefinition
 */

public class TestRunDefinition {
    @SerializedName("versionBuild")
    private final String versionBuild;
    @SerializedName("versionMajor")
    private final String versionMajor = null;
    @SerializedName("versionMilestone")
    private final String versionMilestone = null;
    @SerializedName("versionMinor")
    private final String versionMinor = null;
    @SerializedName("versionRevision")
    private final String versionRevision = null;
    @SerializedName("marker")
    private final String marker = null;
    @SerializedName("platform")
    private final String platform = null;
    @SerializedName("category")
    private final CategoryEnum category;
    @SerializedName("includedMetrics")
    private List<TestRunMetricFilter> includedMetrics;

    public TestRunDefinition(int versionBuild, String performance) {
        this.versionBuild = String.valueOf(versionBuild);
        this.category = CategoryEnum.fromValue(performance);
    }

    /**
     * Get versionBuild
     *
     * @return versionBuild
     **/
    @ApiModelProperty()
    public String getVersionBuild() {
        return versionBuild;
    }

    /**
     * Get versionMajor
     *
     * @return versionMajor
     **/
    @ApiModelProperty()
    public String getVersionMajor() {
        return versionMajor;
    }

    /**
     * Get versionMilestone
     *
     * @return versionMilestone
     **/
    @ApiModelProperty()
    public String getVersionMilestone() {
        return versionMilestone;
    }

    /**
     * Get versionMinor
     *
     * @return versionMinor
     **/
    @ApiModelProperty()
    public String getVersionMinor() {
        return versionMinor;
    }

    /**
     * Get versionRevision
     *
     * @return versionRevision
     **/
    @ApiModelProperty()
    public String getVersionRevision() {
        return versionRevision;
    }

    /**
     * Get marker
     *
     * @return marker
     **/
    @ApiModelProperty()
    public String getMarker() {
        return marker;
    }

    /**
     * Get platform
     *
     * @return platform
     **/
    @ApiModelProperty()
    public String getPlatform() {
        return platform;
    }

    /**
     * Get category
     *
     * @return category
     **/
    @ApiModelProperty(example = "unit")
    public CategoryEnum getCategory() {
        return category;
    }

    public TestRunDefinition includedMetrics(List<TestRunMetricFilter> includedMetrics) {
        this.includedMetrics = includedMetrics;
        return this;
    }

    public TestRunDefinition addIncludedMetricsItem(TestRunMetricFilter includedMetricsItem) {
        if (this.includedMetrics == null) {
            this.includedMetrics = new ArrayList<>();
        }
        this.includedMetrics.add(includedMetricsItem);
        return this;
    }

    /**
     * Get includedMetrics
     *
     * @return includedMetrics
     **/
    @ApiModelProperty()
    public List<TestRunMetricFilter> getIncludedMetrics() {
        return includedMetrics;
    }

    public void setIncludedMetrics(List<TestRunMetricFilter> includedMetrics) {
        this.includedMetrics = includedMetrics;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TestRunDefinition {\n");

        sb.append("    versionBuild: ").append(PerfSigUIUtils.toIndentedString(versionBuild)).append("\n");
        sb.append("    versionMajor: ").append(PerfSigUIUtils.toIndentedString(versionMajor)).append("\n");
        sb.append("    versionMilestone: ").append(PerfSigUIUtils.toIndentedString(versionMilestone)).append("\n");
        sb.append("    versionMinor: ").append(PerfSigUIUtils.toIndentedString(versionMinor)).append("\n");
        sb.append("    versionRevision: ").append(PerfSigUIUtils.toIndentedString(versionRevision)).append("\n");
        sb.append("    marker: ").append(PerfSigUIUtils.toIndentedString(marker)).append("\n");
        sb.append("    platform: ").append(PerfSigUIUtils.toIndentedString(platform)).append("\n");
        sb.append("    category: ").append(PerfSigUIUtils.toIndentedString(category)).append("\n");
        sb.append("    includedMetrics: ").append(PerfSigUIUtils.toIndentedString(includedMetrics)).append("\n");
        sb.append("}");
        return sb.toString();
    }
    /**
     * Gets or Sets category
     */
    @JsonAdapter(CategoryEnum.Adapter.class)
    public enum CategoryEnum {
        UNIT("unit"),

        UIDRIVEN("uidriven"),

        PERFORMANCE("performance"),

        WEBAPI("webapi"),

        EXTERNAL("external");

        private final String value;

        CategoryEnum(String value) {
            this.value = value;
        }

        public static CategoryEnum fromValue(String text) {
            for (CategoryEnum b : CategoryEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static class Adapter extends TypeAdapter<CategoryEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final CategoryEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public CategoryEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return CategoryEnum.fromValue(String.valueOf(value));
            }
        }
    }
}
